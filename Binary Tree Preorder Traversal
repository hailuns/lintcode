
Easy Binary Tree Preorder Traversal
40%
Accepted

Given a binary tree, return the preorder traversal of its nodes' values.
Have you met this question in a real interview?
Example

Given binary tree {1,#,2,3}:

1
 \
  2
 /
3

return [1,2,3].
Challenge

Can you do it without recursion?



/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Preorder in ArrayList which contains node values.
     */
    public ArrayList<Integer> preorderTraversal(TreeNode root) {
        // write your code here
        ArrayList<Integer> res = new ArrayList<Integer>();
        if(root == null) return res;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        while(!stack.isEmpty()){
           TreeNode cur = stack.pop();
           res.add(cur.val);
           if(cur.right != null){
               stack.push(cur.right);
           }
           if(cur.left != null){
               stack.push(cur.left);
           }
        }
        return res;
        
        
    }
}
