Given a set of distinct integers, return all possible subsets.

//recursive
class Solution {
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public ArrayList<ArrayList<Integer>> subsets(ArrayList<Integer> S) {
        // write your code here
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        Collections.sort(S);
        subsetsHelper(res, S, 0, new ArrayList<Integer>());
        return res;
    }
    private void subsetsHelper(ArrayList<ArrayList<Integer>> res, ArrayList<Integer> S, int pos, ArrayList<Integer>  list){
     
        res.add(new ArrayList<Integer>(list));
        for(int i = pos; i < S.size(); i++){
            list.add(S.get(i));
            subsetsHelper(res, S, i+1, list);
            list.remove(list.size()-1);
        }
    }
}
//non recursive
 public List<List<Integer>> subsets(int[] nums) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(nums == null || nums.length == 0) return res;
        ArrayList<Integer> item = new ArrayList<Integer>();
        res.add(item);
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i++){
            int size = res.size();
            for(int j = 0; j < size; j++){
                ArrayList<Integer> temp = new ArrayList<Integer>(res.get(j));
                temp.add(nums[i]);
                res.add(temp);
            }
        }
        return res;
    }
