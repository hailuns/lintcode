public class Solution {
    /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // write your code here
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(candidates == null || candidates.length == 0) return result;
        Arrays.sort(candidates);
        combinationSumHelper(candidates, result, new ArrayList<Integer>(), target, 0);
        return result;
    }
    private void combinationSumHelper(int[] candidates, List<List<Integer>> result, List<Integer> items, int target, int pos){
        if(target == 0){
            result.add(new ArrayList<Integer>(items));
            return;
        }
        int prev = -1;
        for(int i = pos; i < candidates.length; i++){
            if(candidates[i] <= target && prev != candidates[i]){
                int res = target - candidates[i];
                items.add(candidates[i]);
                combinationSumHelper(candidates, result, items, res, i);
                items.remove(items.size()-1);
                prev = candidates[i];
            }
        }
    }
}
