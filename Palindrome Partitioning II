public class Solution {
    /**
     * @param s a string
     * @return an integer
     */
    public int minCut(String s) {
        // write your code here
        if(s == null || s.length() == 0) return 0;
        int[] minCuts = new int[s.length()];
        boolean[][] palindromes = getPalindrome(s);
        for(int i = 0; i < s.length(); i++){
            minCuts[i] = i;
        }
        for(int i = 1; i < s.length(); i++){
            for(int j = 0; j <= i; j++){
                 if (palindromes[j][i]) {
                    if (j == 0) {
                        minCuts[i] = 0;
                    } else {
                        minCuts[i] = Math.min(minCuts[i], minCuts[j - 1] + 1);
                    }
                }
            }
        }
        return minCuts[s.length()-1];
    }
    private boolean[][] getPalindrome(String s){
        boolean[][] isPalindrome = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++){
            isPalindrome[i][i] = true;
        }
        for(int i = 1; i < s.length(); i++){
            for(int j = i-1; j >=0; j--){
                if(s.charAt(i) == s.charAt(j) && ((i-j == 1) || isPalindrome[j+1][i-1] == true)){
                    isPalindrome[j][i] = true;
                }
            }
        }
        return isPalindrome;
    }
    private boolean isPanlindrome(String s){
        int i = 0;
        int j = s.length()-1;
        while(i < j){
            if(s.charAt(i) == s.charAt(j)){
                i++;j--;
            }else{
                return false;
            }
        }
        return true;
    }
};
