//need to practice how to construct Trie


public class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        Set<String> res = new HashSet<String>();
        Trie trie = new Trie();
        for(String word : words){
            trie.insert(word);
        }
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                dfs(board, words, "", i, j, trie, res, visited);
            }
        }
        return new ArrayList<String>(res);
    }
    private void dfs(char[][] board, String[] words, String str, int i, int j, Trie trie, Set<String> res, boolean[][] visited){
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length) return;
        if(visited[i][j]) return;
        str += board[i][j];
        if(!trie.startsWith(str)) return;
        if(trie.search(str)) res.add(str);
        visited[i][j] = true;
        dfs(board, words, str, i-1, j, trie, res, visited);
        dfs(board, words, str, i+1, j, trie, res, visited);
        dfs(board, words, str, i, j-1, trie, res, visited);
        dfs(board, words, str, i, j+1, trie, res, visited);
        visited[i][j] = false;
        return;
    }
    
    class TrieNode {  
    public TrieNode[] children = new TrieNode[26];  
    public String item = "";  
      
    // Initialize your data structure here.  
    public TrieNode() {  
    }  
}  
  
class Trie {  
    private TrieNode root;  
  
    public Trie() {  
        root = new TrieNode();  
    }  
  
    // Inserts a word into the trie.  
    public void insert(String word) {  
        TrieNode node = root;  
        for (char c : word.toCharArray()) {  
            if (node.children[c - 'a'] == null) {  
                node.children[c - 'a'] = new TrieNode();  
            }  
            node = node.children[c - 'a'];  
        }  
        node.item = word;  
    }  
  
    // Returns if the word is in the trie.  
    public boolean search(String word) {  
        TrieNode node = root;  
        for (char c : word.toCharArray()) {  
            if (node.children[c - 'a'] == null) return false;  
            node = node.children[c - 'a'];  
        }  
        return node.item.equals(word);  
    }  
  
    // Returns if there is any word in the trie  
    // that starts with the given prefix.  
    public boolean startsWith(String prefix) {  
        TrieNode node = root;  
        for (char c : prefix.toCharArray()) {  
            if (node.children[c - 'a'] == null) return false;  
            node = node.children[c - 'a'];  
        }  
        return true;  
    }  
}  
}
