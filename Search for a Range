
Medium Search for a Range
20%
Accepted

Given a sorted array of n integers, find the starting and ending position of a given target value.

If the target is not found in the array, return [-1, -1].

//jiuzhang solution used binary search twice to find the lower bound and upper bound.

public class Solution {
    /** 
     *@param A : an integer sorted array
     *@param target :  an integer to be inserted
     *return : a list of length 2, [index1, index2]
     */
    public ArrayList<Integer> searchRange(ArrayList<Integer> A, int target) {
        // write your code here
        int start = 0;
        int end = A.size()-1;
        ArrayList<Integer> result = new ArrayList<Integer>();
        if(A == null || A.size() == 0){
             result.add(-1);
            result.add(-1);
            return result;
        }
        while(start + 1 < end){
            int mid = start + (end - start)/2;
            if (A.get(mid) > target){
                end = mid;
            }else{
                start = mid;
            }
        }
        if(A.get(start) != target && A.get(end) != target){
            result.add(-1);
            result.add(-1);
            return result;
        }
       
        while(start >= 0 && A.get(start) == target){
            start--;
        }
        start++;
        while(end <= A.size()-1 && A.get(end) == target){
            end ++;
        }
        end--;
        result.add(start);
        result.add(end);
        return result;
    }
}

