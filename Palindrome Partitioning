public class Solution {
    /**
     * @param s: A string
     * @return: A list of lists of string
     */
    public List<List<String>> partition(String s) {
        // write your code here
        if(s == null || s.length() == 0) return null;
        List<List<String>> result = new ArrayList<List<String>>();
        partitionHelper(s, result, new ArrayList<String>(), 0);
        return result;
    }
    private void partitionHelper(String s, List<List<String>> result, List<String> item, int pos){
         if(pos == s.length()){
             result.add(new ArrayList<String>(item));
             return;
         }
         for(int i = pos+1; i <= s.length(); i++){
             String temp = s.substring(pos, i);
             if(isPalindrome(temp)){
                 item.add(temp);
                 partitionHelper(s, result, item, i);
                 item.remove(item.size()-1);
             }
         }
         
    }
    private boolean isPalindrome(String s){
        if(s == null || s.length() == 0) return false;
        int start = 0;
        int end = s.length()-1;
        while(start < end){
            if(s.charAt(start) != s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
}
