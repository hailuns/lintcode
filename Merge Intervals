/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
         if (intervals == null || intervals.size() <= 1) return intervals;
        List<Interval> res = new ArrayList<Interval>();
        Comparator<Interval> comparator = new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2){
                if(i1.start == i2.start) return i1.end-i2.end;
                return i1.start - i2.start;
            }
        };
        Collections.sort(intervals, comparator);
        Interval initInterval = intervals.get(0);
        for(int i = 1; i < intervals.size(); i++){
            if(intervals.get(i).start <= initInterval.end){
                initInterval = new Interval(initInterval.start, Math.max(initInterval.end, intervals.get(i).end));
            }else{
                res.add(initInterval);
                initInterval = intervals.get(i);
            }
        }
        res.add(initInterval);
        return res;
    }
}
