

Hard Median of two Sorted Arrays
20%
Accepted

There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays.

class Solution {
    /**
     * @param A: An integer array.
     * @param B: An integer array.
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        // write your code here
        int len = A.length + B.length;
        if(len%2 == 0){
            return (findKthElement(A, 0, B, 0, len/2) + findKthElement(A, 0, B, 0, len/2+1))/2.0;
        }else{
            return findKthElement(A, 0 , B, 0, len/2 + 1);
        }
    }
    
    private int findKthElement(int[] A, int start_A, int[] B, int start_B, int k){
        if(start_A >= A.length) return B[start_B + k -1];
        if(start_B >= B.length) return A[start_A + k -1];
        if(k == 1){
            return Math.min(A[start_A], B[start_B]);
        }
        int A_key = start_A + k/2 - 1 < A.length ? A[start_A + k/2 - 1]: Integer.MAX_VALUE;
        int B_key = start_B + k/2 - 1 < B.length ? B[start_B + k/2 - 1] : Integer.MAX_VALUE;
        if(A_key < B_key){
            return findKthElement(A, start_A+k/2, B, start_B, k-k/2);
        }else{
            return findKthElement(A, start_A, B, start_B+k/2, k-k/2);
        }
    }
}


//solution 2
public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length, len2 = nums2.length, sumLen = len1 + len2;
        if(sumLen%2 != 0){
            return findKth(nums1, 0, len1, nums2, 0, len2, sumLen/2+1);
        }else{
           return (findKth(nums1, 0, len1, nums2, 0, len2, sumLen/2) + findKth(nums1, 0, len1, nums2, 0, len2, sumLen/2+1))/2.0;
        }
        
    }
    
    private int findKth(int[] nums1, int s1, int m, int[] nums2, int s2, int n, int k){
        if(m > n){
            return findKth(nums2, s2, n, nums1, s1, m, k);
        }
        if(m == 0) return nums2[s2+k-1];
        if(k == 1) return Math.min(nums1[s1], nums2[s2]);
        int partA = Math.min(k/2, m);
        int partB = k - partA;
        if(nums1[s1 + partA - 1] == nums2[s2+partB-1]){
            return nums1[s1+partA-1];
        }else if(nums1[s1+partA-1] > nums2[s2+partB-1]){
            return findKth(nums1, s1, m, nums2, s2+partB, n-partB, k-partB);
        }else{
            return findKth(nums1, s1+partA, m-partA, nums2, s2, n, k-partA);
        }
    }
}
