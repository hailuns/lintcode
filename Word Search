 //dfs
 /*
 我们知道一次搜索的复杂度是O(E+V)，E是边的数量，V是顶点数量，在这个问题中他们都是O(m*n)量级的（因为一个顶点有固定上下左右四条边）。
 加上我们对每个顶点都要做一次搜索，所以总的时间复杂度最坏是O(m^2*n^2)，空间上就是要用一个数组来记录访问情况，所以是O(m*n)。
 */
 
 
 public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(dfs(board, word, i, j, visited, 0)) return true;
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] board, String word, int i, int j, boolean[][] visited, int index){
        if(index == word.length()) return true;
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length) return false;
        if(visited[i][j]) return false;
        if(board[i][j] != word.charAt(index)) return false;
        visited[i][j] = true;
        boolean res =  dfs(board, word, i-1, j, visited, index+1) || dfs(board, word, i+1, j, visited, index+1) || dfs(board, word, i, j-1, visited, index+1) || dfs(board, word, i, j+1, visited, index+1);
        visited[i][j] = false;
        return res;
    }
