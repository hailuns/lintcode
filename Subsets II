Given a list of numbers that may has duplicate numbers, return all possible subsets

class Solution {
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public ArrayList<ArrayList<Integer>> subsetsWithDup(ArrayList<Integer> S) {
        // write your code here
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        Collections.sort(S);
        subsetsWithDupHelper(res, S, new ArrayList<Integer>(), 0);
        return res;
    }
    private void subsetsWithDupHelper(ArrayList<ArrayList<Integer>> res, ArrayList<Integer> S, ArrayList<Integer> list, int pos){
        res.add(new ArrayList<Integer>(list));
        for(int i = pos; i < S.size(); i++){
            if(i != pos && S.get(i)==S.get(i-1)){
                continue;
            }
            list.add(S.get(i));
            subsetsWithDupHelper(res, S, list, i+1);
            list.remove(list.size()-1);
        }
    }
    
    
    //leetcode 
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums == null || nums.length == 0) return res;
        Arrays.sort(nums);
        dfs(nums, res, new ArrayList<Integer>(), 0);
        return res;
    }
    private void dfs(int[] nums, List<List<Integer>> res, ArrayList<Integer> list, int pos){
        res.add(new ArrayList(list));
        for(int i = pos; i < nums.length; i++){
            if(i != pos && nums[i] == nums[i-1]) continue;
            list.add(nums[i]);
            dfs(nums, res, list, i+1);
            list.remove(list.size()-1);
        }
    }
}
