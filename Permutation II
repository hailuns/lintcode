
Medium Permutations II
23%
Accepted

Given a list of numbers with duplicate number in it. Find all unique permutations.




class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    public ArrayList<ArrayList<Integer>> permuteUnique(ArrayList<Integer> nums) {
        // write your code here
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(nums == null || nums.size() == 0) return res;
        Collections.sort(nums);
        boolean[] visited = new boolean[nums.size()];
        permuteUniqueHelper(res, nums, new ArrayList<Integer>(), visited);
        return res;
    }
    
    private void permuteUniqueHelper(ArrayList<ArrayList<Integer>> res, ArrayList<Integer> nums, ArrayList<Integer> list, boolean[] visited){
        if(list.size() == nums.size()){
            res.add(new ArrayList<Integer>(list));
            return;
        }
        for(int i = 0; i < nums.size(); i++){
            if(visited[i] || (i!=0 && nums.get(i) == nums.get(i-1)&& !visited[i-1])) continue;
            visited[i] = true;
            list.add(nums.get(i));
            permuteUniqueHelper(res, nums, list, visited);
            list.remove(list.size()-1);
            visited[i] = false;
        }
    }
}
