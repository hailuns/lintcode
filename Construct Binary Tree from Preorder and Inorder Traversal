
Medium Construct Binary Tree from Preorder and Inorder Traversal
29%
Accepted

Given preorder and inorder traversal of a tree, construct the binary tree.

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     *@param preorder : A list of integers that preorder traversal of a tree
     *@param inorder : A list of integers that inorder traversal of a tree
     *@return : Root of a tree
     */
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // write your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i < inorder.length; i++){
            map.put(inorder[i], i);
        }
         return helper(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1, map);
        
    }
    private TreeNode helper(int[] preorder, int preLeft, int preRight, int[] inorder, int inLeft, int inRight, HashMap<Integer, Integer> map){
        if(preLeft > preRight || inLeft > inRight) return null;
        TreeNode root = new TreeNode(preorder[preLeft]);
        int index = map.get(root.val);
        root.left = helper(preorder, preLeft+1, preLeft + index - inLeft, inorder, inLeft, index-1, map);
        root.right = helper(preorder, preLeft + index - inLeft + 1, preRight, inorder, index+1, inRight, map);
        return root;
    }
}
