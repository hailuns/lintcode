

Hard Remove Node in Binary Search Tree
25%
Accepted

Given a root of Binary Search Tree with unique value for each node.  Remove the node with given value. If there is no such a node with given value in the binary search tree, do nothing. You should keep the tree still a binary search tree after removal.



/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param value: Remove the node with given value.
     * @return: The root of the binary search tree after removal.
     */
    public TreeNode removeNode(TreeNode root, int value) {
        // write your code here
        if(root == null){
            return null;
        }else if(value < root.val){
            root.left = removeNode(root.left, value);
        }else if(value > root.val){
            root.right = removeNode(root.right, value);
        }else{ // Find the target node.
            if(root.left == null){
                return root.right;
            }else if (root.right == null){
                return root.left;
            }
            TreeNode cur = root;
            root = findMin(cur.right);
            root.right = deleteMin(cur.right);
            root.left = cur.left;
        } 
        return root;
    }
    // Find the min node of the binary search tree.
    private TreeNode findMin(TreeNode node){
        while(node != null &&  node.left != null){
            node = node.left;
        }
        return node;
    }
    // Delete the min node of the binary search tree.
    private TreeNode deleteMin(TreeNode node){
        if (node.left == null) {
            return node.right;
        }

        TreeNode root = node;

        // Find the parent of the min.
        TreeNode parent = null;
        while (node != null && node.left != null) {
            parent = node;
            node = node.left;
        }
        // Cut the parent relationship to the min,
        // and take the right child of the min.
        
        parent.left = node.right;

        return root;
    }
}
