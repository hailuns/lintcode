/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    public ListNode mergeKLists(List<ListNode> lists) {  
        // write your code here
        if(lists == null || lists.size() == 0) return null;
        return mergeKLists(lists, 0, lists.size()-1);
    }
    private ListNode mergeKLists(List<ListNode> lists, int start, int end){
        if(start == end) return lists.get(start);
        int mid = start + (end-start)/2;
        ListNode left = mergeKLists(lists, start, mid);
        ListNode right = mergeKLists(lists, mid+1, end);
        return mergeTwoLists(left, right);
    }
    private ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // write your code here
        if(l1 == null || l2 == null){
            return l1 == null ? l2 : l1;
        }
        ListNode dummy = new ListNode(-1);
        ListNode pre = dummy;
        pre.next = l1;
        while(l1 != null && l2 != null){
            if(l1.val > l2.val){
                ListNode temp2 = l2.next;
                l2.next = pre.next;
                pre.next = l2;
                l2  = temp2;
            }else{
                l1 = l1.next;
            }
            pre = pre.next;
        }
        if(l2 != null){
            pre.next = l2;
        }
        return dummy.next;
        
    }
}

